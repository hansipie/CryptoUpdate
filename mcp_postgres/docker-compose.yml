version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: crypto-postgres
    environment:
      POSTGRES_DB: cryptoupdate
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mcp-postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d cryptoupdate"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MCP PostgreSQL Server
  mcp-postgres-server:
    build:
      context: ..
      dockerfile: mcp_postgres/Dockerfile
    container_name: crypto-mcp-postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=cryptoupdate
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=crypto_password
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ../:/app:ro  # Read-only mount for development
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-postgres-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crypto-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@crypto.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - mcp-postgres-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - mcp-postgres-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  mcp-postgres-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local